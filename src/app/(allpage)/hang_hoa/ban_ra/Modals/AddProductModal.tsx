
"use client";
import {
    Modal,
    Box,
    Typography,
    TextField,
    Autocomplete,
    Button,
    IconButton,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    CircularProgress,
    InputAdornment
} from "@mui/material";
import { NumericFormat } from 'react-number-format';
import AddIcon from "@mui/icons-material/Add";
import useProductData from '@/app/hooks/useProductData';
import { Controller, useForm } from 'react-hook-form';
import { mutate } from "swr";
import axios from 'axios';
import React, { useState } from "react";
import AddOutlinedIcon from '@mui/icons-material/AddOutlined';



const AddProductModal: React.FC = () => {
    const {
        register,
        control,
        handleSubmit,
        formState: { errors },
        reset
    } = useForm<Product>(); // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu cho form
    
    const [open, setOpen] = React.useState(false);
    const handleOpen = () => {
        setOpen(true);
    }
    const handleClose = () => {
        setOpen(false)
    }
    const {productData, error, isLoading} = useProductData();
    const [dialogType, setDialogType] = useState<"" | "group" | "unit">("");
    const [inputValue, setInputValue] = useState("");
    const [loading, setLoading] = React.useState(false);
    const [errorForm, setErrorForm] = React.useState("");
    const [values, setValues] = React.useState({
        textmask: '(100) 000-0000',
        numberformat: '0',
    });

    const [valueSale, setValueSale] = React.useState({
        textmask: '(100) 000-0000',
        numberformat: '0',
    });

    // X·ªØ l√Ω m√£ s·∫£n ph·∫©m
    const existingCodes = productData.map(item => item.id_product)
    const generateNextProductCode = (existingCodes: string[]) => {
        if (existingCodes.length === 0) return "SP01"; // N·∫øu ch∆∞a c√≥ s·∫£n ph·∫©m n√†o, b·∫Øt ƒë·∫ßu t·ª´ SP01

        // L·∫•y ph·∫ßn s·ªë t·ª´ m√£ s·∫£n ph·∫©m (SP01 -> 1, SP09 -> 9, SP100 -> 100)
        const numbers = existingCodes.map(code => parseInt(code.replace("SP", ""), 10));

        // T√¨m s·ªë l·ªõn nh·∫•t
        const maxNumber = Math.max(...numbers);

        // TƒÉng s·ªë ƒë√≥ l√™n 1
        const nextNumber = maxNumber + 1;

        // N·∫øu s·ªë nh·ªè h∆°n 100, gi·ªØ 2 ch·ªØ s·ªë (01, 02, ..., 99), n·∫øu >= 100 th√¨ kh√¥ng c·∫ßn 0 ·ªü ƒë·∫ßu
        const formattedNumber = nextNumber < 100 ? nextNumber.toString().padStart(2, "0") : nextNumber.toString();
        return `SP${formattedNumber}`;
    };

    // dialog
    const handleOpenDialog = (type: "group" | "unit") => {
        setDialogType(type);
        setInputValue("");
    };

    const handleCloseDialog = () => setDialogType("");


    // H√†m L∆∞u gi√° tr·ªã xu·ªëng local storage
    const saveToLocalStorage = (key: string, value: any) => {
        if (typeof window !== "undefined") {
            localStorage.setItem(key, JSON.stringify(value));
        }
    };

    // H√†m L·∫•y gi√° tr·ªã t·ª´ localstorage
    const getFromLocalStorage = (key: string): any => {
        if (typeof window !== "undefined") {
            const storedValue = localStorage.getItem(key);
            return storedValue ? JSON.parse(storedValue) : null;
        }
        return null;
    };
    // H√†m th√™m nh√≥m ho·∫∑c ƒë∆°n v·ªã t√≠nh L∆∞u xu·ªëng localstorage
    const addUnitType = (newUnit: string) => {
        if (!newUnit.trim()) return; // Kh√¥ng l∆∞u n·∫øu r·ªóng

        const storedUnits = getFromLocalStorage("unitTypes") || [];

        if (storedUnits.includes(newUnit)) {
            alert(`ƒê∆°n v·ªã t√≠nh "${newUnit}" ƒë√£ t·ªìn t·∫°i!`);
            return;
        }

        const updatedUnits = [...storedUnits, newUnit];
        saveToLocalStorage("unitTypes", updatedUnits);
        handleCloseDialog()
    };

    const addProductGroup = (newGroup: string) => {
        if (!newGroup.trim()) return; // Kh√¥ng l∆∞u n·∫øu r·ªóng

        const storedGroups = getFromLocalStorage("productGroups") || [];

        if (storedGroups.includes(newGroup)) {
            alert(`Nh√≥m s·∫£n ph·∫©m "${newGroup}" ƒë√£ t·ªìn t·∫°i!`);
            return;
        }

        const updatedGroups = [...storedGroups, newGroup];
        saveToLocalStorage("productGroups", updatedGroups);
        handleCloseDialog();
    };

    const onSubmit = async (data: Product) => {
        setLoading(true);
        setErrorForm("");
        try {
            console.log("D·ªØ li·ªáu g·ª≠i ƒëi", {

                name: data.name,
                group: data.group,
                unit: data.unit,
                costPrice: Number(String(data.costPrice).replace(/\D/g, "")),
                salePrice: Number(String(data.salePrice).replace(/\D/g, "")) ?? 0,
                stockQuantity: data.stockQuantity ?? 0,
                stock_in: 0,
                stock_out: 0,
            }
            )
            const response = await axios.post("http://192.168.1.203:8000/qlybanhang/add-cate", {
                name: data.name,
                group: data.group,
                unit: data.unit,
                costPrice: Number(String(data.costPrice).replace(/\D/g, "")),
                salePrice: Number(String(data.salePrice).replace(/\D/g, "")) ?? 0,
                stockQuantity: data.stockQuantity ?? 0,
                stock_in: 0,
                stock_out: 0,
            }, {
                headers: { "Content-Type": "application/json" }
            });

            mutate("http://192.168.1.203:8000/qlybanhang/cate")
            handleClose();
        } catch (err) {
            console.error("L·ªói khi l∆∞u kh√°ch h√†ng", err);
            setErrorForm("Kh√¥ng th·ªÉ l∆∞u kh√°ch h√†ng, vui l√≤ng th·ª≠ l·∫°i!");
        } finally {
            setLoading(false);
        }
    };

    return (
        <>
            <Box>
            {/* Button */}
            <Button sx={{ bgcolor: '#8DB883', color: 'white',  width: "100px" }} startIcon={<AddOutlinedIcon/>} onClick={handleOpen}>Th√™m</Button>

            <Modal open={open} onClose={handleClose}>
                <Box sx={{ position: 'absolute', top: '40%', left: '50%', transform: 'translate(-50%, -50%)', width: 900, bgcolor: 'background.paper', boxShadow: 24, borderRadius: 2 }}>
                    {/* Ti√™u ƒë·ªÅ */}
                    <Box
                        sx={{
                            backgroundColor: "#8DB883", // N·ªÅn ƒë·ªè
                            textAlign: "center", // CƒÉn gi·ªØa ch·ªØ
                            color: "white", // Ch·ªØ tr·∫Øng
                            fontWeight: "bold",
                            fontSize: "18px",
                            p: 3,
                            borderTopLeftRadius: 8,
                            borderTopRightRadius: 8,
                        }}
                    >
                        Th√™m m·ªõi h√†ng h√≥a
                    </Box>
                    {/* N·ªôi dung */}
                    {isLoading ? (
                        <Box display="flex" justifyContent="center" alignItems="center" height="505px">
                            <CircularProgress />
                        </Box>

                    ) : (<Box component="form" onSubmit={handleSubmit(onSubmit)} display="grid" gridTemplateColumns="1fr 1fr" gap={3} p={3}>
                        <Box display="flex" flexDirection="column">
                            <Typography>M√£ S·∫£n Ph·∫©m</Typography>
                            <TextField disabled defaultValue={generateNextProductCode(existingCodes) || []} sx={{ height: 35, '& .MuiInputBase-root': { height: 35 }, borderRadius: 10 }} />
                        </Box>

                        <Box display="flex" flexDirection="column">
                            <Typography fontWeight="bold">T√™n S·∫£n Ph·∫©m</Typography>
                            <TextField
                                {...register("name", {
                                    required: "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                                    minLength: { value: 3, message: "T√™n ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±" },
                                    maxLength: { value: 50, message: "T√™n kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 50 k√Ω t·ª±" }
                                })}
                                sx={{ '& .MuiInputBase-root': { height: 40, borderRadius: 2 } }}

                            />
                            <Typography sx={{ minHeight: "20px", fontSize: "15px", color: "red", mt: 0.5 }}>
                                {errors.name?.message}
                            </Typography>
                        </Box>
                        <Box display="flex" flexDirection="column">
                            <Typography>Nh√≥m S·∫£n Ph·∫©m</Typography>

                            <Controller
                                name="group"
                                control={control}
                                rules={{
                                    required: "Nh√≥m s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                                    minLength: { value: 2, message: "Nh√≥m s·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±" },
                                    maxLength: { value: 30, message: "Nh√≥m s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 30 k√Ω t·ª±" }
                                }}
                                render={({ field }) => (
                                    <Autocomplete
                                        {...field}
                                        disablePortal
                                        freeSolo
                                        defaultValue={""}
                                        options={getFromLocalStorage("productGroups") || ["Kh√¥ng c√≥ k·∫øt qu·∫£!"]} // ƒê·∫£m b·∫£o kh√¥ng 
                                        value={field.value || ""}  // üîπ Lu√¥n c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh
                                        onChange={(_, data) => field.onChange(data)} // C·∫≠p nh·∫≠t gi√° tr·ªã cho form
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                sx={{
                                                    height: 35,
                                                    "& .MuiOutlinedInput-root": {
                                                        paddingRight: "12px !important", // Ch·ª´a kho·∫£ng tr·ªëng ƒë·ªÉ kh√¥ng b·ªã ƒë√® l√™n icon
                                                    },
                                                    "& .MuiInputBase-root": { height: 35 },
                                                    borderRadius: 10,
                                                }}
                                                InputProps={{
                                                    ...params.InputProps, // ‚ö†Ô∏è Gi·ªØ l·∫°i `InputProps` g·ªëc c·ªßa Autocomplete
                                                    endAdornment: (
                                                        <InputAdornment position="end">
                                                            {params.InputProps?.endAdornment} {/* Gi·ªØ l·∫°i dropdown m·∫∑c ƒë·ªãnh */}
                                                            <IconButton onClick={() => handleOpenDialog("group")} edge="end">
                                                                <AddIcon />
                                                            </IconButton>
                                                        </InputAdornment>
                                                    ),
                                                }}
                                            />
                                        )}
                                    />
                                )}
                            />
                            <Typography sx={{ minHeight: "20px", fontSize: "15px", color: "red", mt: 0.5 }}>
                                {errors.group?.message}
                            </Typography>
                        </Box>

                        <Box display="flex" flexDirection="column">
                            <Typography>ƒê∆°n V·ªã T√≠nh</Typography>
                            <Controller
                                name="unit"
                                control={control}
                                rules={{
                                    required: "ƒê∆°n v·ªã t√≠nh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",

                                }}
                                render={({ field }) => (
                                    <Autocomplete
                                        {...field}
                                        disablePortal
                                        freeSolo
                                        defaultValue={""}
                                        options={getFromLocalStorage("unitTypes") || ["Kh√¥ng c√≥ k·∫øt qu·∫£!"]} // ƒê·∫£m b·∫£o kh√¥ng 
                                        value={field.value || ""}  // üîπ Lu√¥n c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh
                                        onChange={(_, data) => field.onChange(data)} // C·∫≠p nh·∫≠t gi√° tr·ªã cho form
                                        renderInput={(params) => (
                                            <TextField
                                                {...params}
                                                sx={{
                                                    height: 35,
                                                    "& .MuiOutlinedInput-root": {
                                                        paddingRight: "12px !important", // Ch·ª´a kho·∫£ng tr·ªëng ƒë·ªÉ kh√¥ng b·ªã ƒë√® l√™n icon
                                                    },
                                                    "& .MuiInputBase-root": { height: 35 },
                                                    borderRadius: 10,
                                                }}
                                                InputProps={{
                                                    ...params.InputProps, // ‚ö†Ô∏è Gi·ªØ l·∫°i `InputProps` g·ªëc c·ªßa Autocomplete
                                                    endAdornment: (
                                                        <InputAdornment position="end">
                                                            {params.InputProps?.endAdornment} {/* Gi·ªØ l·∫°i dropdown m·∫∑c ƒë·ªãnh */}
                                                            <IconButton onClick={() => handleOpenDialog("unit")} edge="end">
                                                                <AddIcon />
                                                            </IconButton>
                                                        </InputAdornment>
                                                    ),
                                                }}
                                            />
                                        )}
                                    />
                                )}
                            />
                            <Typography sx={{ minHeight: "20px", fontSize: "15px", color: "red", mt: 0.5 }}>
                                {errors.unit?.message}
                            </Typography>
                        </Box>
                        <Box display="flex" flexDirection="column">
                            <Typography fontWeight="bold">Gi√° v·ªën</Typography>
                            <Controller
                                name="costPrice"
                                control={control}
                                rules={{
                                    required: "Gi√° v·ªën kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
                                }}
                                render={({ field }) => (
                                    <NumericFormat
                                        {...field}
                                        value={values.numberformat}
                                        onValueChange={(values) => {
                                            setValues((prevValues) => ({
                                                ...prevValues,
                                                numberformat: values.value,
                                            }));
                                            field.onChange(values.value); // c·∫≠p nh·∫≠t gi√° tr·ªã cho form
                                        }}
                                        onFocus={() => {
                                            if (values.numberformat === '0') {
                                              setValues((prev) => ({
                                                ...prev,
                                                numberformat: '',
                                              }));
                                            }
                                          }}
                                          onBlur={() => {
                                            if (values.numberformat === '') {
                                              setValues((prev) => ({
                                                ...prev,
                                                numberformat: '0',
                                              }));
                                            }
                                          }}
                                        customInput={TextField}
                                        thousandSeparator="."
                                        decimalSeparator=","
                                        valueIsNumericString
                                        suffix=" VND"
                                        variant="outlined"
                                        sx={{ height: 35, '& .MuiInputBase-root': { height: 35 }, borderRadius: 10 }}
                                    />
                                )}
                            />
                            <Typography sx={{ minHeight: "20px", fontSize: "15px", color: "red", mt: 0.5 }}>
                                {errors.costPrice?.message}
                            </Typography>
                        </Box>

                        <Box display="flex" flexDirection="column">
                            <Typography fontWeight="bold">Gi√° B√°n</Typography>
                            <Controller
                                name="salePrice"
                                control={control}
                                rules={{
                                    // required: "Gi√° b√°n kh√¥ng ƒë∆∞·ª£c b√© h∆°n gi√° v·ªën",
                                }}
                                render={({ field }) => (
                                    <NumericFormat
                                        {...field}
                                        value={valueSale.numberformat}
                                        onValueChange={(valueSaleObj) => {
                                            setValueSale((prev) => ({
                                              ...prev,
                                              numberformat: valueSaleObj.value,
                                            }));
                                            field.onChange(valueSaleObj.value); // c·∫≠p nh·∫≠t cho react-hook-form
                                          }}
                                          onFocus={() => {
                                            if (valueSale.numberformat === '0') {
                                              setValueSale((prev) => ({
                                                ...prev,
                                                numberformat: '',
                                              }));
                                            }
                                          }}
                                          onBlur={() => {
                                            if (valueSale.numberformat === '') {
                                              setValueSale((prev) => ({
                                                ...prev,
                                                numberformat: '0',
                                              }));
                                            }
                                        }}

                                        customInput={TextField}
                                        thousandSeparator="."
                                        decimalSeparator=","
                                        valueIsNumericString
                                        suffix=" VND"
                                        variant="outlined"
                                        sx={{ height: 35, '& .MuiInputBase-root': { height: 35 }, borderRadius: 10 }}
                                    />
                                )}
                            />
                            <Typography sx={{ minHeight: "20px", fontSize: "15px", color: "red", mt: 0.5 }}>
                                {errors.salePrice?.message}
                            </Typography>
                        </Box>

                        <Box display="flex" flexDirection="column">
                            <Typography>T·ªìn Kho</Typography>
                            <TextField type="number" sx={{ height: 35, '& .MuiInputBase-root': { height: 35 }, borderRadius: 10 }} />
                        </Box>

                        <Box sx={{ display: 'flex', justifyContent: 'end', gap: 3, paddingLeft: 4, paddingRight: 4, paddingBottom: 4, mt: 10 }}>
                            {/* Hi·ªÉn th·ªã l·ªói chung n·∫øu c√≥ */}
                            {errorForm && (
                                <Typography sx={{ color: "red", textAlign: "center", fontSize: "15px" }}>
                                    {errorForm}
                                </Typography>
                            )}
                            <Button variant="outlined" sx={{ color: "#8DB883", border: "1px solid #8DB883", width: "100px", "&:hover": { backgroundColor: "rgba(141, 184, 131, 0.1)", border: "1px solid #8DB883" } }} onClick={() => {
                                reset(),
                                    setErrorForm(""),
                                    handleClose()
                            }} disabled={isLoading} >B·ªè qua</Button>
                            <Button type="submit" variant="contained" sx={{ bgcolor: "#8DB883", width: "100px", color: 'white' }} disabled={loading}>{loading ? <CircularProgress size={24} sx={{ color: "white" }} /> : "L∆∞u"}</Button>
                        </Box>
                    </Box>)}
                </Box>
            </Modal>

            <Dialog open={dialogType === "group"} onClose={handleCloseDialog}>
                <DialogTitle>Th√™m Nh√≥m S·∫£n Ph·∫©m</DialogTitle>
                <DialogContent>
                    <TextField
                        fullWidth
                        placeholder="Nh·∫≠p Nh√≥m S·∫£n Ph·∫©m"
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleCloseDialog} sx={{ color: "red" }}>H·ªßy</Button>
                    <Button onClick={() => addProductGroup(inputValue)} sx={{ bgcolor: "#8DB883", color: "#fff" }}>
                        Th√™m
                    </Button>
                </DialogActions>
            </Dialog>

            <Dialog open={dialogType === "unit"} onClose={handleCloseDialog}>
                <DialogTitle>Th√™m ƒê∆°n V·ªã T√≠nh</DialogTitle>
                <DialogContent>
                    <TextField
                        fullWidth
                        placeholder="Nh·∫≠p ƒê∆°n V·ªã T√≠nh"
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleCloseDialog} sx={{ color: "red" }}>H·ªßy</Button>
                    <Button onClick={() => addUnitType(inputValue)} sx={{ bgcolor: "#8DB883", color: "#fff" }}>
                        Th√™m
                    </Button>
                </DialogActions>
            </Dialog>
            </Box>
        </>
    )
}

export default AddProductModal;