"use client";
import React, {useState}  from "react";
import TextField from '@mui/material/TextField';
import Autocomplete from '@mui/material/Autocomplete';
import { Box, IconButton } from "@mui/material";
import ModalAddCustomer from './Modal/ModalAddCustomer';
import useCustomerData from '@/app/hooks/useCustomerData';
import removeVietnameseTones from "@/app/utils/removeVietnameseTones"; 


interface propsCustomer {
  onSelectCustomer?: (customer: Customer | null) => void;
}

export default function SearchCustomer({ onSelectCustomer } : propsCustomer) {
// g·ª≠i ƒëi
// G·ªçi custom hook
const { customerData, error, isLoading } = useCustomerData("http://api.sdc.com:8000/v1/customers");

  const [value, setValue] = useState<Customer | null>(null); // Gi√° tr·ªã nh·∫≠p v√†o √¥ input
  const [inputValue, setInputValue] = useState(""); // Qu·∫£n l√Ω n·ªôi dung √¥ nh·∫≠p
  // const [onSelectCustomer, setSelectCustomer] = useState(null);

  const handleAddCustomer = (newCustomer: Customer) => {
    console.log("Kh√°ch h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u", newCustomer);

    // C·∫≠p nh·∫≠t kh√°ch h√†ng ƒë√£ ch·ªçn v√†o Autocomplete
    setValue(newCustomer);

    // G·ª≠i kh√°ch h√†ng m·ªõi l√™n `CustomerForm`
    if (onSelectCustomer) {
        onSelectCustomer(newCustomer);
    }
};

  return (
    <Autocomplete
      options={customerData} 
      getOptionLabel={(option) => option.name}
      filterOptions={(options, { inputValue }) => {
        const query = removeVietnameseTones(inputValue.toLowerCase());
        return options.filter((option) =>
          removeVietnameseTones(option.name.toLowerCase()).includes(query)
        );
      }}
      sx={{ height: '30px',width: 520 }}
      noOptionsText={isLoading ? "Vui l√≤ng ch·ªù..." : "Kh√¥ng c√≥ k·∫øt qu·∫£!"}
      value={value} // üîπ L∆∞u kh√°ch h√†ng ƒë∆∞·ª£c ch·ªçn
      inputValue={inputValue} // üîπ Hi·ªÉn th·ªã input ƒë√∫ng theo kh√°ch h√†ng
      

  
      // ‚úÖ C·∫≠p nh·∫≠t gi√° tr·ªã input khi g√µ t√¨m ki·∫øm
      onInputChange={(_, newInputValue) => {
        setValue(null); // Reset gi√° tr·ªã ƒë√£ ch·ªçn
        setInputValue(newInputValue);
      }}
  
      // ‚úÖ Khi ch·ªçn kh√°ch h√†ng
    onChange={(_, newValue) => {
    setValue(newValue); // L∆∞u kh√°ch h√†ng ƒë√£ ch·ªçn
    setInputValue(""); // Hi·ªÉn th·ªã t√™n kh√°ch h√†ng v√†o input
    if (onSelectCustomer) {
      onSelectCustomer(newValue); // G·ª≠i d·ªØ li·ªáu ra ngo√†i component cha
    }
  }}

      // ‚úÖ Ch·ªâ hi·ªÉn th·ªã popup khi c√≥ k√Ω t·ª± nh·∫≠p v√†o
      open={!!inputValue}
      renderInput={(params) => 
        <Box style={{ width: "100%"}}>
      <TextField {...params} placeholder='Nh·∫≠p t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng...'
       sx={{
        '& .MuiInputBase-root': {
        height: 30,
         position: "relative",
        "& .MuiAutocomplete-endAdornment": { display: "none" } // Chi·ªÅu cao c·ªßa input
        },
        '& .MuiOutlinedInput-root': {
      '& fieldset': {
        borderColor: 'default', // M√†u m·∫∑c ƒë·ªãnh c·ªßa border
      },
      '&:hover fieldset': {
        borderColor: '#8DB883', // Khi hover, border s·∫Ω ƒë·ªïi m√†u ƒë·ªè
      },
      '&.Mui-focused fieldset': {
        borderColor: '#8DB883', // Khi active (focused), border s·∫Ω ƒë·ªïi m√†u v√†ng
      }}
    }} 
    />
    {/* L·ªói ch·ªìng l√™n nhau fix th√¢n th·∫ø c·ªßa n√≥ */}
          <Box
        
            sx={{
              position: "absolute",
              top:"72px",
              right:"28px"

            }}
          >
           <ModalAddCustomer onAddCustomer={handleAddCustomer}/>
          </Box>
    </Box>

    } 
    />
    
  );
}

