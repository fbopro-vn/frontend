// 'use client'

// /** @jsxImportSource @emotion/react */
// import { Button } from "@mui/material";
// import Head from "next/head";
// import Link from "next/link";
// import { css, keyframes } from "@emotion/react";

// const fadeInUp = keyframes`
//   from {
//     opacity: 0;
//     transform: translateY(20px);
//   }
//   to {
//     opacity: 1;
//     transform: translateY(0);
//   }
// `;

// const animatedBlock = css`
//   animation: ${fadeInUp} 1s ease-out;
// `;

// export default function Home() {
//   return (
//     <>
//       <Head>
//       <title>Ph·∫ßn m·ªÅm qu·∫£n l√Ω t√≠ch h·ª£p m·∫°nh m·∫Ω</title>
//         <meta
//           name="description"
//           content="Kh√°m ph√° c√¥ng ngh·ªá v√† quy tr√¨nh s·∫£n xu·∫•t g·ªó mica hi·ªán ƒë·∫°i nh·∫•t."
//         />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link
//           href="https://fonts.googleapis.com/css2?family=Roboto&display=swap"
//           rel="stylesheet"
//         />
//       </Head>

//       <main style={{ fontFamily: 'Roboto, sans-serif', backgroundColor: "#f0f7f2" }}>
//         <header
//           css={css`
//             ${animatedBlock};
//             background-color: #8DB883;
//             color: white;
//             padding: 2rem 1rem;
//             position: relative;
//           `}
//         >
//           <div style={{ position: "absolute", top: "1rem", right: "1rem" }}>
//             <Link href="/login" passHref>
//               <Button variant="outlined" color="inherit" size="small" style={{ marginRight: "0.5rem" }}>
//                 ƒêƒÉng nh·∫≠p
//               </Button>
//             </Link>
//             {/* <Link href="/dang_ky" passHref>
//               <Button variant="contained" color="secondary" size="small">
//                 ƒêƒÉng k√Ω
//               </Button>
//             </Link> */}
//           </div>
//           <h1 style={{ fontSize: "3rem", marginBottom: "1rem", textAlign: "center" }}>
//             Gi·∫£i ph√°p ph·∫ßn m·ªÅm t√≠ch h·ª£p to√†n di·ªán
//           </h1>
//           <p style={{ fontSize: "1.25rem", textAlign: "center" }}>
//             V·∫≠n h√†nh ‚Äì ƒê·∫∑t h√†ng ‚Äì K·∫ø to√°n ‚Äì Xu·∫•t h√≥a ƒë∆°n ‚Äì T·∫•t c·∫£ trong m·ªôt
//           </p>
//           <div style={{ textAlign: "center" }}>
//             <Button variant="contained" color="secondary" style={{ marginTop: "1.5rem" }}>
//               D√πng th·ª≠ mi·ªÖn ph√≠
//             </Button>
//           </div>
//         </header>

//         <section
//           css={css`
//             ${animatedBlock};
//             padding: 4rem 2rem;
//             background-color: #e6f0e9;
//           `}
//         >
//           <h2 style={{ textAlign: "center", fontSize: "2rem", marginBottom: "2rem" }}>Quy tr√¨nh s·∫£n xu·∫•t</h2>
//           <div style={{ display: "flex", justifyContent: "space-around", flexWrap: "wrap", gap: "2rem" }}>
//             <Step icon="‚öôÔ∏è" title="Qu·∫£n l√Ω v·∫≠n h√†nh" desc="T·ªëi ∆∞u h√≥a quy tr√¨nh ho·∫°t ƒë·ªông v√† t·ª± ƒë·ªông h√≥a t√°c v·ª•." />
//             <Step icon="üõí" title="ƒê·∫∑t h√†ng th√¥ng minh" desc="Theo d√µi, qu·∫£n l√Ω ƒë∆°n h√†ng v√† kho v·∫≠n m·ªôt c√°ch hi·ªáu qu·∫£." />
//             <Step icon="üìä" title="K·∫ø to√°n ch√≠nh x√°c" desc="ƒê·ªìng b·ªô h√≥a s·ªï s√°ch k·∫ø to√°n, b√°o c√°o t√†i ch√≠nh t·ª©c th√¨." />
//             <Step icon="üßæ" title="Xu·∫•t h√≥a ƒë∆°n ƒëi·ªán t·ª≠" desc="T√≠ch h·ª£p h√≥a ƒë∆°n ƒëi·ªán t·ª≠ theo chu·∫©n quy ƒë·ªãnh, d·ªÖ d√†ng v√† nhanh ch√≥ng." />
//           </div>
//         </section>

//         <section
//           css={css`
//             ${animatedBlock};
//             padding: 4rem 2rem;
//             background-color: white;
//           `}
//         >
//           <h2 style={{ textAlign: "center", fontSize: "2rem", marginBottom: "2rem" }}>T·∫°i sao ch·ªçn ch√∫ng t√¥i</h2>
//           <ul style={{ maxWidth: "700px", margin: "auto", fontSize: "1.1rem", lineHeight: "1.8" }}>
//           <li>Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng tr√™n m·ªçi thi·∫øt b·ªã</li>
//             <li>Hi·ªáu nƒÉng c·ª±c m·∫°nh, x·ª≠ l√Ω h√†ng ngh√¨n giao d·ªãch m·ªói ng√†y</li>
//             <li>ƒê·ªôi ng≈© h·ªó tr·ª£ 24/7, ƒë·ªìng h√†nh c√πng b·∫°n m·ªçi l√∫c</li>
//             <li>Chi ph√≠ h·ª£p l√Ω, linh ho·∫°t theo quy m√¥ doanh nghi·ªáp</li>
//           </ul>
//         </section>

//         <footer style={{ backgroundColor: "#4f6f52", color: "white", textAlign: "center", padding: "2rem 1rem" }}>
//           <p>B·∫£n quy·ªÅn ¬© 2025 Gi·∫£i ph√°p ph·∫ßn m·ªÅm t√≠ch h·ª£p doanh nghi·ªáp</p>
//         </footer>
//       </main>
//     </>
//   );
// }

// function Step({ icon, title, desc }: { icon: string; title: string; desc: string }) {
//   return (
//     <div
//       css={css`
//         ${animatedBlock};
//         background-color: white;
//         border-radius: 12px;
//         padding: 2rem;
//         max-width: 280px;
//         box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
//       `}
//     >
//       <div style={{ fontSize: "2rem" }}>{icon}</div>
//       <h3 style={{ fontSize: "1.2rem", marginTop: "1rem" }}>{title}</h3>
//       <p style={{ fontSize: "0.95rem", color: "#555" }}>{desc}</p>
//     </div>
//   );
'use client';

import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Button,
  Typography,
  Box,
  Container,
  Stack,
  CircularProgress,
  Slide
} from '@mui/material';
import { TransitionProps } from '@mui/material/transitions';

const SlideTransition = React.forwardRef(function Transition(
  props: TransitionProps & {
    children: React.ReactElement<any, any>;
  },
  ref: React.Ref<unknown>
) {
  return <Slide direction="left" ref={ref} {...props} />;
});

export default function HomePage() {
  const [registerStep, setRegisterStep] = useState(1);
  const [openLogin, setOpenLogin] = useState(false);
  const [openRegister, setOpenRegister] = useState(false);
  const [companyCode, setCompanyCode] = useState('');
  const [loading, setLoading] = useState(false);
  const [urlCompany, setUrlCompany] = useState('');
  const [companyName, setCompanyName] = useState('');
  const [fullName, setFullName] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');

  const resetRegisterForm = () => {
    setRegisterStep(1);
    setUrlCompany('');
    setCompanyName('');
    setFullName('');
    setUsername('');
    setPassword('');
    setConfirmPassword('');
    setEmail('');
    setPhone('');
  };

  const resetLoginForm = () => {
    setCompanyCode('');
    setLoading(false);
  };

  
  const handleLogin = async () => {
    if (!companyCode) return alert('Vui l√≤ng nh·∫≠p m√£ c√¥ng ty');

    setLoading(true);
    const code = companyCode.toLowerCase();

    try {
      const res = await fetch('http://api.sdc.com:8000/v1/auth/check-company', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ companyCode: code }),
      });

      const result = await res.json();
      console.log('‚úÖ K·∫øt qu·∫£ t·ª´ backend:', result);

      if (!res.ok) {
        alert('C√¥ng ty kh√¥ng t·ªìn t·∫°i');
        setLoading(false);
        return;
      }

      window.location.href = `http://${code}.fbopro.vn:3000/login`;
    } catch (err) {
      console.error('‚ùå L·ªói khi g·ªçi API:', err);
      alert('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß');
      setLoading(false);
    }
  };

  const handleRegister = async () => {
    if (password !== confirmPassword) {
      alert("M·∫≠t kh·∫©u kh√¥ng kh·ªõp.");
      return;
    }

    try {
      const payload1 = {
        companyCode: urlCompany,
        companyName,
      };

      const payload2 = {
        fullName,
        username,
        password,
        email,
        phone,
      };

      const [res1, res2] = await Promise.all([
        fetch('http://api.sdc.com:8000/v1/companies', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload1),
        }),
        fetch('http://api.sdc.com:8000/v1/companies/admin', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload2),
        }),
      ]);

      const result1 = await res1.json();
      const result2 = await res2.json();

      if (!res1.ok || !res2.ok) {
        throw new Error('ƒêƒÉng k√Ω th·∫•t b·∫°i');
      }

      alert('ƒêƒÉng k√Ω th√†nh c√¥ng!');
      resetRegisterForm();
      setOpenRegister(false);
    } catch (err) {
      console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω:', err);
      alert('ƒêƒÉng k√Ω th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  return (
    <Container maxWidth="md" sx={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
      <Stack spacing={3} alignItems="center">
        <Typography variant="h5" color="primary">Ch√†o m·ª´ng ƒë·∫øn v·ªõi FBO</Typography>

        <Stack direction="row" spacing={2}>
          <Button variant="contained" onClick={() => setOpenLogin(true)}>ƒêƒÉng nh·∫≠p</Button>
          <Button variant="outlined" onClick={() => { setRegisterStep(1); setOpenRegister(true); }}>ƒêƒÉng k√Ω</Button>
        </Stack>

        <Dialog open={openLogin} onClose={() => {
            resetLoginForm();
            setOpenLogin(false);
          }} maxWidth="xs" fullWidth>
          <Box sx={{ backgroundColor: 'white' }}>
            <DialogTitle sx={{ fontWeight: 'bold', pb: 0 }}>ƒêƒÉng nh·∫≠p t√†i kho·∫£n FBO</DialogTitle>
            <DialogContent sx={{ pt: 1 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mt: 2 }}>
                <TextField
                  variant="outlined"
                  placeholder="M√£ c√¥ng ty"
                  value={companyCode}
                  onChange={(e) => setCompanyCode(e.target.value)}
                  fullWidth
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      '& fieldset': { borderColor: '#666' },
                      '&:hover fieldset': { borderColor: '#aaa' },
                      '&.Mui-focused fieldset': { borderColor: '#90caf9' }
                    },
                  }}
                  InputProps={{
                    endAdornment: <Typography sx={{ ml: 1, color: '#aaa' }}>fbopro.vn</Typography>,
                  }}
                />
              </Box>
              <Box sx={{ mt: 2 }}>
                <Typography variant="body2" sx={{ color: '#aaa' }}>
                  B·∫°n ch∆∞a c√≥ gian h√†ng tr√™n FBO?{' '}
                  <Button variant="text" sx={{ p: 0, color: '#4fc3f7' }} onClick={() => {
                    resetLoginForm();
                    setOpenLogin(false);
                    setRegisterStep(1);
                    setOpenRegister(true);
                  }}>
                    D√πng th·ª≠ mi·ªÖn ph√≠
                  </Button>
                </Typography>
              </Box>
            </DialogContent>
            <DialogActions sx={{ justifyContent: 'center', pb: 2 }}>
              <Button
                variant="contained"
                onClick={handleLogin}
                disabled={loading}
                sx={{
                  bgcolor: '#2196f3',
                  color: 'white',
                  '&:hover': { bgcolor: '#1976d2' },
                  px: 4,
                }}
              >
                {loading ? <CircularProgress size={20} color="inherit" /> : 'V√†o c·ª≠a h√†ng'}
              </Button>
            </DialogActions>
          </Box>
        </Dialog>

        <Dialog
          open={openRegister}
          onClose={() => {
            resetRegisterForm();
            setOpenRegister(false);
          }}
          maxWidth="lg"
          fullWidth
          scroll="paper"
          TransitionComponent={SlideTransition}
          sx={{ '& .MuiPaper-root': { borderRadius: 4, minHeight: '600px', maxHeight: '90vh' } }}
        >
          <Box display="flex" height="100%">
            <Box flex="1" sx={{
              backgroundImage: 'url("https://img5.thuthuatphanmem.vn/uploads/2021/09/22/background-cay-xanh-anime_095057518.jpg")',
              backgroundSize: 'cover',
              backgroundPosition: 'center',
              display: 'flex', alignItems: 'center', justifyContent: 'center',
              color: '#fff', px: 4
            }}>
              <Typography variant="h5" fontWeight="bold" textAlign="center">
                Qu·∫£n l√Ω d·ªÖ d√†ng<br />B√°n h√†ng ƒë∆°n gi·∫£n
              </Typography>
            </Box>

            <Box flex="1.2" p={5} bgcolor="#fff" display="flex" flexDirection="column" justifyContent="space-between" minHeight="600px">
              <Box flex={1} display="flex" flexDirection="column" justifyContent="center">
                <DialogTitle sx={{ fontWeight: 'bold', fontSize: 22, px: 0 }}>
                  ƒêƒÉng k√Ω c√¥ng ty
                </DialogTitle>
                <DialogContent sx={{ px: 0, pt: 1 }}>
                  <Stack spacing={2} sx={{ transition: 'all 0.3s ease-out' }}>
                    {registerStep === 1 && (
                      <>
                        <TextField label="ƒê∆∞·ªùng d·∫´n c√¥ng ty" fullWidth value={urlCompany} onChange={(e) => setUrlCompany(e.target.value)} />
                        <TextField label="T√™n c√¥ng ty" fullWidth value={companyName} onChange={(e) => setCompanyName(e.target.value)} />
                      </>
                    )}
                    {registerStep === 2 && (
                      <>
                        <TextField label="H·ªç v√† t√™n" fullWidth value={fullName} onChange={(e) => setFullName(e.target.value)} />
                        <TextField label="T√™n ƒëƒÉng nh·∫≠p" fullWidth value={username} onChange={(e) => setUsername(e.target.value)} />
                        <TextField label="M·∫≠t kh·∫©u" type="password" fullWidth value={password} onChange={(e) => setPassword(e.target.value)} />
                        <TextField label="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u" type="password" fullWidth value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} />
                        <TextField label="Email" type="email" fullWidth value={email} onChange={(e) => setEmail(e.target.value)} />
                        <TextField label="S·ªë ƒëi·ªán tho·∫°i" fullWidth value={phone} onChange={(e) => setPhone(e.target.value)} />
                      </>
                    )}
                  </Stack>
                </DialogContent>
              </Box>

              <DialogActions sx={{ px: 0, pt: 3 }}>
                <Button onClick={() => {
                  if (registerStep === 1) {
                    resetRegisterForm();
                    setOpenRegister(false);
                  } else {
                    setRegisterStep(1);
                  }
                }} color="inherit">
                  {registerStep === 1 ? 'H·ªßy' : 'Quay l·∫°i'}
                </Button>

                {registerStep === 1 ? (
                  <Button variant="contained" onClick={() => {
                    if (!urlCompany || !companyName) return alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin c√¥ng ty');
                    setRegisterStep(2);
                  }}
                    sx={{ bgcolor: '#1976d2', '&:hover': { bgcolor: '#1565c0' }, color: '#fff' }}>
                    Ti·∫øp t·ª•c
                  </Button>
                ) : (
                  <Button variant="contained" onClick={handleRegister}
                    sx={{ bgcolor: '#1976d2', '&:hover': { bgcolor: '#1565c0' }, color: '#fff' }}>
                    ƒêƒÉng k√Ω
                  </Button>
                )}
              </DialogActions>
            </Box>
          </Box>
        </Dialog>
      </Stack>
    </Container>
  );
}
